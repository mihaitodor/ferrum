// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package db

import (
	"context"
)

const addPatient = `-- name: AddPatient :one
INSERT INTO patient (
    first_name, last_name, address, phone, email
  )
VALUES
  ($1, $2, $3, $4, $5) RETURNING id, first_name, last_name, address, phone, email, created_at
`

type AddPatientParams struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Address   string `json:"address"`
	Phone     string `json:"phone"`
	Email     string `json:"email"`
}

func (q *Queries) AddPatient(ctx context.Context, arg AddPatientParams) (Patient, error) {
	row := q.db.QueryRowContext(ctx, addPatient,
		arg.FirstName,
		arg.LastName,
		arg.Address,
		arg.Phone,
		arg.Email,
	)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Address,
		&i.Phone,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getPatient = `-- name: GetPatient :one
SELECT
  id, first_name, last_name, address, phone, email, created_at
FROM patient
WHERE
  id = $1
LIMIT
  1
`

func (q *Queries) GetPatient(ctx context.Context, id int32) (Patient, error) {
	row := q.db.QueryRowContext(ctx, getPatient, id)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Address,
		&i.Phone,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getPatients = `-- name: GetPatients :many
SELECT
  id, first_name, last_name, address, phone, email, created_at
FROM patient
`

// queries.sql
func (q *Queries) GetPatients(ctx context.Context) ([]Patient, error) {
	rows, err := q.db.QueryContext(ctx, getPatients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Patient
	for rows.Next() {
		var i Patient
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Address,
			&i.Phone,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
